version: '3.8'
services:
  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: 'no'
    ports:
      - '9000:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:29092'
      JVM_OPTS: '-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify'
    depends_on:
      - 'kafka'
    networks:
      - backend

  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: 'no'
    ports:
      - '2181:2181'
      - '9092:9092'
    environment:
      KAFKA_LISTENERS: 'INTERNAL://:29092,EXTERNAL://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://${ip}:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: '6000'
      KAFKA_RESTART_ATTEMPTS: '10'
      KAFKA_RESTART_DELAY: '5'
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: '0'
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    networks:
      - backend

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
    ports:
      - 3000:3000
    env_file: ./api-gateway/env/production.env
    environment:
      - TZ=Asia/Seoul
      - NODE_ENV=production
    volumes:
      # (필수) 컨테이너에서 모듈과 빌드된 파일을 사용할 수 있도록 알려야함.
      - ./api-gateway:/usr/app
      - /usr/app/node_modules
      - /usr/app/dist
      - ./api-gateway/logs:/usr/app/logs
    depends_on:
      - kafka
    stdin_open: true
    tty: true
    networks:
      - backend

  product:
    container_name: product
    build:
      context: ./product
    ports:
      - 3001:3001
    env_file: ./product/env/production.env
    environment:
      - TZ=Asia/Seoul
      - NODE_ENV=production
    volumes:
      - ./product:/usr/app
      - /usr/app/node_modules
      - /usr/app/dist
      - ./product/logs:/usr/app/logs
    depends_on:
      - kafka
    stdin_open: true
    tty: true
    networks:
      - backend

  stock:
    container_name: stock
    build:
      context: ./stock
    ports:
      - 3002:3002
    env_file: ./stock/env/production.env
    environment:
      - TZ=Asia/Seoul
      - NODE_ENV=production
    volumes:
      - ./stock:/usr/app
      - /usr/app/node_modules
      - /usr/app/dist
      - ./stock/logs:/usr/app/logs
    depends_on:
      - kafka
    stdin_open: true
    tty: true
    networks:
      - backend

networks:
  backend:
    driver: bridge
